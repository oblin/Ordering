@model Ordering.Models.Client
@inject Ordering.Services.IFormDataService FormDataHelper

<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <h1 class="page-header">
                Add a New Client <br />
                <small>We're always happy to gain new customers.</small>
            </h1>
        </div>
    </div>
    @using(Html.BeginForm("NewClient", "Client", FormMethod.Post))
    {
        <div class="row">
            @Html.ValidationSummary(false) <!-- false: 代表要顯示所有 properties 的錯誤訊息， true: 代表忽略 -->
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabeledTextBoxFor(x => x.FirstName, "First Name")
                    @Html.ValidationMessageFor(x => x.FirstName, "必須要輸入內容")
                </div>
                <div class="form-group">
<<<<<<< HEAD:Views/Client/NewClient.cshtml
                    @Html.LabelFor(x => x.LastName)
                    @Html.EditorFor(x => x.LastName)
=======
                    @Html.LabeledTextBoxFor(x => x.LastName, "Last Name")
>>>>>>> b7fa48064fa6efe42c42213503680df2d4535599:Themes/Default/Client/NewClient.cshtml
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.CompanyName, "Company Name")
                    @Html.TextBoxFor(x => x.CompanyName, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Phone)
                    @Html.TextBoxFor(x => x.Phone, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Email)
                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Email)
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.ContactDate, "Contact Date")
                    @Html.EditorFor(x => x.ContactDate)
                </div>
                <div class="form-group">
                    <label>Client Type</label>
                    @Html.DropDownListFor(x => x.ClientType, FormDataHelper.GetClientTypes(), new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.NearestLocation, "Nearest Location")
                    @Html.DropDownListFor(x => x.NearestLocation, FormDataHelper.GetLocations(), new { @class = "form-control" })
                </div>
            </div>
            <div class="col-md-4">
                @await Component.InvokeAsync("InventoryWidget", new { Threshold = 20 })
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 form-group">
                @Html.LabelFor(x => x.Notes)
                @Html.EditorFor(x => x.Notes)
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 form-group">
                <label for="">Subscribe to:</label>
                <div>
                    @for(var i = 0; i < Model.EmailPromos.Count; i++)
                    {
                        @Html.CheckBoxFor(e => e.EmailPromos[i].IsSubscribed)
                        <span>@Model.EmailPromos[i].Title</span>
                        @Html.HiddenFor(e => e.EmailPromos[i].Id)
                        @Html.HiddenFor(e => e.EmailPromos[i].Title)
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <h3>Billing Address</h3>
                @Html.EditorFor(x => x.BillingAddress)
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <h3>Mailing Address</h3>
                @Html.EditorFor(x => x.MailingAddress)
                <input type="submit" class="pull-right btn btn-primary" />
            </div>
        </div>
    }
</div>

@section Footer {
    <p>Make sure to send new clients a welcome page.</p>
}
